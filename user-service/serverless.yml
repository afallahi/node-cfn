service: user-service
frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  versionFunctions: false # dont keep versions
  stage: ${opt:stage,'offline'}
  region: "us-east-1"
  httpApi:
    cors: true
  environment:
    #JWT
    JWT_SECRET_KEY: ${ssm:JWT_SECRET_KEY}
    #Twilio
    ACCOUNT_SID: ${ssm:ACCOUNT_SID}
    AUTH_TOKEN: ${ssm:AUTH_TOKEN}
    FROM_PHONE_NUMBER: ${ssm:FROM_PHONE_NUMBER}
    VERIFY_SID: ${ssm:VERIFY_SID}
    #PostgreSQL db
    DB_USER: ${ssm:DB_USER}
    DB_PASSWORD: ${ssm:DB_PASSWORD}



functions:
  register:
    handler: app/handler.Register
    events:
      - httpApi:
          path: /register
          method: post
  login:
    handler: app/handler.Login
    events:
      - httpApi:
          path: /login
          method: post
  verify:
    handler: app/handler.Verify
    events:
      - httpApi:
          path: /verify
          method: get
      - httpApi:
          path: /verify
          method: post


custom:
  serviceName: ${self:service}
  autoswagger:
    title: 'User Service'
    apiType:  'httpApi'  

  serverless-offline-ssm:
    stages:
      - offline
    ssm:
      # JWT
      JWT_SECRET_KEY: ${env:JWT_SECRET_KEY}
      # Twilio
      ACCOUNT_SID: ${env:ACCOUNT_SID}
      AUTH_TOKEN: ${env:AUTH_TOKEN}
      FROM_PHONE_NUMBER: ${env:FROM_PHONE_NUMBER}
      VERIFY_SID: ${env:VERIFY_SID}
      # db
      DB_USER: ${env:DB_USER}
      DB_PASSWORD: ${env:DB_PASSWORD}

package:
  exclude:
    - README.md
    - .build

plugins:
  - serverless-dotenv-plugin
  - serverless-offline-ssm
  - serverless-auto-swagger   # https://{your-url-domain}/swagger
  - serverless-offline
  - serverless-plugin-typescript
